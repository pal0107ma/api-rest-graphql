type Query {
  userProfile(id: ID): User  
  post(id: ID!): Post
  posts(count: Int, after: Int, category: String, q: String): [Post]
}

type Mutation {
  createPost(title: String!, description: String!, category: String!, tags: [String!]!): Post

  updatePost(id: ID, title: String, description: String, category: String, tags: [String!]): Post
}

type Post {
  id: ID
  title: String
  description: String
  category: String
  tags: [String
  ]
  userId: ID
  responsesCount: Int
  responses: [Response
  ]
  createdAt: String
  updatedAt: String
}

type Response {
  id: ID
  userId: ID
  createdAt: String
  updatedAt: String
}

type User {
  id: ID
  email: String
  username: String
  accountConfirmed: Boolean
  firstName: String
  lastName: String
  skills: [Skill
  ]
  workExperiences: [WorkExperience
  ]
  about: String
  phoneNumber: String
  role: String
  createdAt: String
  updatedAt: String
}

type Skill {
  level: String
  skill: String
  topic: String
  category: String
  id: ID
}

type WorkExperience {
  institution: String
  labor: String
  description: String
  years: Int
  createdAt: String
  updatedAt: String
}